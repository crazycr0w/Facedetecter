import cv2

# Load the Haar cascade XML files for face and eye detection
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier('haarcascade_eye.xml')

# Capture frames from the default camera (0)
cap = cv2.VideoCapture(0)

while True:
    # Read frames from the camera
    ret, img = cap.read()

    # Convert each frame to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Detect faces in the grayscale frame
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)

    for (x, y, w, h) in faces:
        # Draw a rectangle around the detected face
        cv2.rectangle(img, (x, y), (x+w, y+h), (255, 255, 0), 2)
        roi_gray = gray[y:y+h, x:x+w]
        roi_color = img[y:y+h, x:x+w]

        # Detect eyes in the detected face region
        eyes = eye_cascade.detectMultiScale(roi_gray)

        # Draw rectangles around the detected eyes
        for (ex, ey, ew, eh) in eyes:
            cv2.rectangle(roi_color, (ex, ey), (ex+ew, ey+eh), (0, 127, 255), 2)

    # Display the processed frame in a window
    cv2.imshow('Face and Eye Detection', img)

    # Wait for Esc key (ASCII code 27) to stop
    k = cv2.waitKey(30) & 0xff
    if k == 27:
        break

# Release the video capture object and close the OpenCV window
cap.release()
cv2.destroyAllWindows()
